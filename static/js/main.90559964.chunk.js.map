{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","act","setAct","useEffect","stopwatch$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","Date","toISOString","slice","onClick","onDoubleClick","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"6NAKe,SAASA,IAAO,IAAD,EAELC,mBAAS,GAFJ,mBAEtBC,EAFsB,KAEhBC,EAFgB,OAGPF,mBAAS,QAHF,mBAGtBG,EAHsB,KAGjBC,EAHiB,KAK7BC,qBAAU,WACT,IAAMC,EAAa,IAAIC,IAQtB,OAPDC,YAAS,KACPC,KAAKC,YAAUJ,IACfK,WAAU,WACC,UAARR,GACHD,GAAQ,SAAAU,GAAG,OAAIA,EAAM,UAGf,WACPN,EAAWO,OACXP,EAAWQ,cAEX,CAACX,IAoBH,OACC,gCACC,6BAAM,IAAIY,KAAKd,GAAMe,cAAcC,MAAM,GAAI,MAC7C,wBAAQC,QAAU,WApBnBd,EAAO,UAoBN,mBACA,wBAAQc,QAAU,kBAjBnBd,EAAO,aACPF,EAAQ,IAgBP,kBACA,wBAAQiB,cAAgB,WAbzBf,EAAO,SAaN,kBACA,wBAAQc,QAAU,kBAVnBhB,EAAQ,QACRE,EAAO,UASN,sBAKHgB,iBAAO,cAACrB,EAAD,IAASsB,SAASC,eAAe,SCtDxC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAClC,EAAD,MAEFsB,SAASC,eAAe,SAM1BC,M","file":"static/js/main.90559964.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport { interval, Subject } from \"rxjs\";\nimport { takeUntil } from 'rxjs/operators'\n\nexport default function App() {\n\n\tconst [time, setTime] = useState(0);\n\tconst [act, setAct] = useState('stop')\n\n\tuseEffect(() => {\n\t\tconst stopwatch$ = new Subject();\n\t\tinterval(1000)\n\t\t\t.pipe(takeUntil(stopwatch$))\n\t\t\t.subscribe(() => {\n\t\t\tif (act === 'start'){\n\t\t\t\tsetTime(val => val + 1000);\n\t\t\t}\n\t\t\t});\n\t\t\treturn () => {\n\t\t\tstopwatch$.next();\n\t\t\tstopwatch$.complete();\n\t\t\t};\n\t},[act])\n\n\tconst start = () => {\n\t\tsetAct('start');\n\t}\n\n\tconst stop = () => {\n\t\tsetAct('stop');\n\t\tsetTime(0);\n\t}\n\n\tconst wait = () => {\n\t\tsetAct('wait')\n\t}\n\n\tconst reset = () => {\n\t\tsetTime(0)\n\t\tsetAct('start')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{ new Date(time).toISOString().slice(11, 19) }</h1>\n\t\t\t<button onClick={ () => start() }>Start</button>\n\t\t\t<button onClick={ () => stop() }>Stop</button>\n\t\t\t<button onDoubleClick={ () => wait() }>Wait</button>\n\t\t\t<button onClick={ () => reset() }>Reset</button>\n\t\t</div>\n\t);\n}\n \nrender(<App />, document.getElementById(\"root\"));","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}